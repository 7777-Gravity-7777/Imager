import streamlit as st
import requests
import urllib.parse
import google.generativeai as genai
import os
from google.generativeai.types import HarmCategory, HarmBlockThreshold
#test
# Set up the page configuration for title and favicon
st.set_page_config(page_title="Imager", page_icon="✨", layout="wide")

# Set up the API key for Google Gemini (should be securely managed in practice)
api_key = 'AIzaSyDDmIfcyTt3r5sCsid0BrCHiURJawVHdkY'  # Replace with your actual Google Gemini API key
os.environ["API_KEY"] = api_key
genai.configure(api_key=api_key)

# Define the system instruction for Google Gemini for enhanced prompts
instruction = """
ou are an AI expert helping with generating unique image prompts. Your task is to provide detailed, creative, and high-quality prompts based on user input. You should take the user's basic image description and enrich it with elements that will generate visually stunning and relevant images. Focus on making the prompt rich, descriptive, and suitable for high-resolution images.
dont give multiple prompt and Enhance this description by focusing on high-quality details such as lighting, texture, composition, and color schemes. Ensure the image is visually stunning, with depth and clarity, suitable for high-resolution output"""

# Function to generate enhanced image prompts using Google Gemini API
def generate_enhanced_prompt(basic_prompt):
    prompt = f"""Basic prompt: {basic_prompt}.  Enhance this description by focusing on high-quality details such as lighting, texture, composition, and color schemes. Ensure the image is visually stunning, with depth and clarity, suitable for high-resolution output."""

    try:
        # Initialize the Gemini model
        model = genai.GenerativeModel("gemini-1.5-flash-latest", system_instruction=instruction, 
                                
                                      safety_settings={
                                          HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE, 
                                          HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,  
                                          HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE, 
                                          HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE, 
                                          
        }
    )
        # Start a chat with the model
        chat = model.start_chat(history=[])
        response = chat.send_message(prompt)
        
        # Return the enriched prompt text generated by Gemini, stripping any extra details
        enhanced_prompt = response.text.strip()
        return enhanced_prompt
    except Exception as e:
        # Handle errors gracefully
        return f"Error: {str(e)}"

# Function to download the image
def download_image(image_url, save_path='image.jpg'):
    try:
        response = requests.get(image_url)
        response.raise_for_status()  # Raise an exception for bad status codes
        with open(save_path, 'wb') as file:
            file.write(response.content)
        return save_path
    except requests.exceptions.RequestException as e:
        return f"Error: {str(e)}"

# Main function for Streamlit app
def main():
    st.title("Imager ✨")
    st.markdown("Customize and generate a unique image with your preferred details!")

    # Enable/Disable AI Prompt Toggle
    enable_ai = st.checkbox("Enable AI Prompt", value=True)

    # Get user input for the prompt and other image settings
    prompt = st.text_input("Enter the image description (prompt):")
   
    # Use sliders for width, height, and seed values
    col1, col2 = st.columns(2)
    with col1:
        width = st.slider("Width", 256, 1024, 768)
    with col2:
        height = st.slider("Height", 256, 1024, 768)

    seed = st.slider("Seed", 1, 1000, 42)

    # Model selection
    model = st.selectbox("Select a model", [
        "Flux", "Flux-Pro", "Flux-Realism", "Flux-Anime", "Flux-3D", "Flux-CablyAl", "Turbo"
    ])

    # Generate enhanced prompt if AI is enabled
    if enable_ai and prompt:
        enhanced_prompt = generate_enhanced_prompt(prompt)
        st.markdown("### Enhanced Image Description:")
        st.write(enhanced_prompt)
    elif not enable_ai:
        st.markdown("### AI Prompt is Disabled")
        enhanced_prompt = prompt if prompt else "A beautiful 3D scene of a futuristic city"  # Use default if no prompt

    # Image generation button with a loading spinner
    if st.button("Generate Image"):
        with st.spinner("Generating your image..."):
            encoded_prompt = urllib.parse.quote(enhanced_prompt)
            image_url = f"https://pollinations.ai/p/{encoded_prompt}?width={width}&height={height}&seed={seed}&model={model}"
            image_path = download_image(image_url)

            if "Error" in image_path:
                st.error(f"Failed to generate image: {image_path}")
            else:
                st.image(image_path, use_container_width=True)
                st.success("Image generated successfully!")

# Run the app
if __name__ == "__main__":
    main()
